import { AggregateAccumulationType, AggregateBooleanNegativeType, AggregateBooleanSimpleType, AggregateCalculationFunctionType, AggregateCalculationSimpleType, AggregateCommandLike, AggregateCompareFilterType, AggregateCompareSimpleType, AggregateConditionType, AggregateJsonType, AggregateMixParamType, AggregateStringType } from '../../../aggregateCommand/interface';
import { SQLAggregateCommandClip } from './interface';
/**
 * @description aggregate clip 片段
 */
declare class MySQLAggregateCommandClip implements SQLAggregateCommandClip {
    and(aggregate: AggregateCommandLike<any, AggregateBooleanSimpleType.AND, AggregateMixParamType<object>[]>): string;
    or(aggregate: AggregateCommandLike<any, AggregateBooleanSimpleType.OR, AggregateMixParamType<object>[]>): string;
    not(aggregate: AggregateCommandLike<any, AggregateBooleanNegativeType.NOT, AggregateMixParamType<object>[]>): string;
    nor(aggregate: AggregateCommandLike<any, AggregateBooleanNegativeType.NOR, AggregateMixParamType<object>[]>): string;
    nand(aggregate: AggregateCommandLike<any, AggregateBooleanNegativeType.NAND, AggregateMixParamType<object>[]>): string;
    cmp(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.CMP, AggregateMixParamType<object>[]>): string;
    eq(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.EQ, AggregateMixParamType<object>[]>): string;
    neq(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.NEQ, AggregateMixParamType<object>[]>): string;
    lt(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.LT, AggregateMixParamType<object>[]>): string;
    lte(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.LTE, AggregateMixParamType<object>[]>): string;
    gt(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.GT, AggregateMixParamType<object>[]>): string;
    gte(aggregate: AggregateCommandLike<any, AggregateCompareSimpleType.GTE, AggregateMixParamType<object>[]>): string;
    in(aggregate: AggregateCommandLike<any, AggregateCompareFilterType.IN, AggregateMixParamType<object>[]>): string;
    nin(aggregate: AggregateCommandLike<any, AggregateCompareFilterType.NIN, AggregateMixParamType<object>[]>): string;
    abs(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.ABS, AggregateMixParamType<object>[]>): string;
    sqrt(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.SQRT, AggregateMixParamType<object>[]>): string;
    ln(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.LN, AggregateMixParamType<object>[]>): string;
    log10(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.LOG10, AggregateMixParamType<object>[]>): string;
    sin(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.SIN, AggregateMixParamType<object>[]>): string;
    asin(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.ASIN, AggregateMixParamType<object>[]>): string;
    cos(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.COS, AggregateMixParamType<object>[]>): string;
    acos(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.ACOS, AggregateMixParamType<object>[]>): string;
    tan(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.TAN, AggregateMixParamType<object>[]>): string;
    atan(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.ATAN, AggregateMixParamType<object>[]>): string;
    cot(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.COT, AggregateMixParamType<object>[]>): string;
    floor(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.FLOOR, AggregateMixParamType<object>[]>): string;
    round(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.ROUND, AggregateMixParamType<object>[]>): string;
    ceil(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.CEIL, AggregateMixParamType<object>[]>): string;
    exp(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.EXP, AggregateMixParamType<object>[]>): string;
    sign(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.SIGN, AggregateMixParamType<object>[]>): string;
    mod(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.MOD, AggregateMixParamType<object>[]>): string;
    log(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.LOG, AggregateMixParamType<object>[]>): string;
    pow(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.POW, AggregateMixParamType<object>[]>): string;
    greatest(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.GREATEST, AggregateMixParamType<object>[]>): string;
    least(aggregate: AggregateCommandLike<any, AggregateCalculationFunctionType.LEAST, AggregateMixParamType<object>[]>): string;
    add(aggregate: AggregateCommandLike<any, AggregateCalculationSimpleType.ADD, AggregateMixParamType<object>[]>): string;
    subtract(aggregate: AggregateCommandLike<any, AggregateCalculationSimpleType.SUBTRACT, AggregateMixParamType<object>[]>): string;
    multiply(aggregate: AggregateCommandLike<any, AggregateCalculationSimpleType.MULTIPLY, AggregateMixParamType<object>[]>): string;
    divide(aggregate: AggregateCommandLike<any, AggregateCalculationSimpleType.DIVIDE, AggregateMixParamType<object>[]>): string;
    length(aggregate: AggregateCommandLike<any, AggregateStringType.LENGTH, AggregateMixParamType<object>[]>): string;
    reverse(aggregate: AggregateCommandLike<any, AggregateStringType.REVERSE, AggregateMixParamType<object>[]>): string;
    trim(aggregate: AggregateCommandLike<any, AggregateStringType.TRIM, AggregateMixParamType<object>[]>): string;
    upper(aggregate: AggregateCommandLike<any, AggregateStringType.UPPER, AggregateMixParamType<object>[]>): string;
    lower(aggregate: AggregateCommandLike<any, AggregateStringType.LOWER, AggregateMixParamType<object>[]>): string;
    left(aggregate: AggregateCommandLike<any, AggregateStringType.LEFT, AggregateMixParamType<object>[]>): string;
    right(aggregate: AggregateCommandLike<any, AggregateStringType.RIGHT, AggregateMixParamType<object>[]>): string;
    replace(aggregate: AggregateCommandLike<any, AggregateStringType.REPLACE, AggregateMixParamType<object>[]>): string;
    substring(aggregate: AggregateCommandLike<any, AggregateStringType.SUBSTRING, AggregateMixParamType<object>[]>): string;
    insert(aggregate: AggregateCommandLike<any, AggregateStringType.INSERT, AggregateMixParamType<object>[]>): string;
    concat(aggregate: AggregateCommandLike<any, AggregateStringType.CONCAT, AggregateMixParamType<object>[]>): string;
    avg(aggregate: AggregateCommandLike<any, AggregateAccumulationType.AVG, AggregateMixParamType<object>[]>): string;
    max(aggregate: AggregateCommandLike<any, AggregateAccumulationType.MAX, AggregateMixParamType<object>[]>): string;
    min(aggregate: AggregateCommandLike<any, AggregateAccumulationType.MIN, AggregateMixParamType<object>[]>): string;
    sum(aggregate: AggregateCommandLike<any, AggregateAccumulationType.SUM, AggregateMixParamType<object>[]>): string;
    count(aggregate: AggregateCommandLike<any, AggregateAccumulationType.COUNT, AggregateMixParamType<object>[]>): string;
    cond(aggregate: AggregateCommandLike<any, AggregateConditionType.COND, AggregateMixParamType<object>[]>): string;
    ifnull(aggregate: AggregateCommandLike<any, AggregateConditionType.IFNULL, AggregateMixParamType<object>[]>): string;
    json_contains(aggregate: AggregateCommandLike<any, AggregateJsonType.CONTAINS, AggregateMixParamType<object>[]>): string;
    json_contains_path(aggregate: AggregateCommandLike<any, AggregateJsonType.CONTAINS_PATH, AggregateMixParamType<object>[]>): string;
    json_search(aggregate: AggregateCommandLike<any, AggregateJsonType.SEARCH, AggregateMixParamType<object>[]>): string;
    json_extract(aggregate: AggregateCommandLike<any, AggregateJsonType.EXTRACT, AggregateMixParamType<object>[]>): string;
    json_merge_preserve(aggregate: AggregateCommandLike<any, AggregateJsonType.MERGE_PRESERVE, AggregateMixParamType<object>[]>): string;
    json_merge_patch(aggregate: AggregateCommandLike<any, AggregateJsonType.MERGE_PATCH, AggregateMixParamType<object>[]>): string;
    json_set(aggregate: AggregateCommandLike<any, AggregateJsonType.SET, AggregateMixParamType<object>[]>): string;
    json_insert(aggregate: AggregateCommandLike<any, AggregateJsonType.INSERT, AggregateMixParamType<object>[]>): string;
    json_replace(aggregate: AggregateCommandLike<any, AggregateJsonType.REPLACE, AggregateMixParamType<object>[]>): string;
    json_remove(aggregate: AggregateCommandLike<any, AggregateJsonType.REMOVE, AggregateMixParamType<object>[]>): string;
    json_array_append(aggregate: AggregateCommandLike<any, AggregateJsonType.ARRAY_APPEND, AggregateMixParamType<object>[]>): string;
    json_array_insert(aggregate: AggregateCommandLike<any, AggregateJsonType.ARRAY_INSERT, AggregateMixParamType<object>[]>): string;
    json_object(aggregate: AggregateCommandLike<any, AggregateJsonType.OBJECT, AggregateMixParamType<object>[]>): string;
    json_array(aggregate: AggregateCommandLike<any, AggregateJsonType.ARRAY, AggregateMixParamType<object>[]>): string;
    json_type(aggregate: AggregateCommandLike<any, AggregateJsonType.TYPE, AggregateMixParamType<object>[]>): string;
    json_keys(aggregate: AggregateCommandLike<any, AggregateJsonType.KEYS, AggregateMixParamType<object>[]>): string;
    json_depth(aggregate: AggregateCommandLike<any, AggregateJsonType.DEPTH, AggregateMixParamType<object>[]>): string;
    json_length(aggregate: AggregateCommandLike<any, AggregateJsonType.LENGTH, AggregateMixParamType<object>[]>): string;
    json_valid(aggregate: AggregateCommandLike<any, AggregateJsonType.VALID, AggregateMixParamType<object>[]>): string;
    json_pretty(aggregate: AggregateCommandLike<any, AggregateJsonType.PRETTY, AggregateMixParamType<object>[]>): string;
    json_quote(aggregate: AggregateCommandLike<any, AggregateJsonType.QUOTE, AggregateMixParamType<object>[]>): string;
    json_unquote(aggregate: AggregateCommandLike<any, AggregateJsonType.UNQUOTE, AggregateMixParamType<object>[]>): string;
}
declare const sqlAggregateCommandClip: MySQLAggregateCommandClip;
export { sqlAggregateCommandClip, MySQLAggregateCommandClip };
